// file: ManufactureOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package Ontology;

import Ontology.concepts.domain.*;
import Ontology.concepts.general.*;
import Ontology.actions.*;
import jade.content.onto.BasicOntology;
import jade.content.onto.Ontology;
import jade.content.schema.AgentActionSchema;
import jade.content.schema.ConceptSchema;
import jade.content.schema.ObjectSchema;
import jade.content.schema.TermSchema;

/**
 * file: ManufactureOntology.java
 *
 * @author OntologyBeanGenerator v4.1
 * @version 2021/03/12, 20:14:46
 */
public class ManufactureOntology extends Ontology {

    private static final long serialVersionUID = 2553008228997541291L;

    //NAME
    public static final String ONTOLOGY_NAME = "Manufacture";
    // The singleton instance of this ontology
    private static Ontology theInstance = new ManufactureOntology();

    public static Ontology getInstance() {
        return theInstance;
    }


    // VOCABULARY
    public static final String SENDTASK_OPERATION = "operation";
    public static final String SENDTASK = "SendTask";
    public static final String SENDOPERATIONJOURNAL_OPERATIONJOURNAL = "operationJournal";
    public static final String SENDOPERATIONJOURNAL = "SendOperationJournal";
    public static final String SENDMANUFACTUREJOURNAL_MANUFACTUREJOURNAL = "manufactureJournal";
    public static final String SENDMANUFACTUREJOURNAL = "SendManufactureJournal";
    public static final String SENDORDER = "SendOrder";
    public static final String SENDORDER_ORDER = "order";
    public static final String PLAN_OPERATIONS = "operations";
    public static final String PLAN = "Plan";
    public static final String ABSTRACTITEM_NAME = "name";
    public static final String ABSTRACTITEM_DESCRIPTION = "description";
    public static final String ABSTRACTITEM = "AbstractItem";
    public static final String RESOURCE_TOOLS = "tools";
    public static final String RESOURCE_TYPE = "type";
    public static final String RESOURCE_LOCATION = "location";
    public static final String RESOURCE = "Resource";
    public static final String ABSTRACTJOURNAL_STATUS = "status";
    public static final String ABSTRACTJOURNAL_STARTDATE = "startDate";
    public static final String ABSTRACTJOURNAL_ENDDATE = "endDate";
    public static final String ABSTRACTJOURNAL = "AbstractJournal";
    public static final String ORDER_PRODUCT = "product";
    public static final String ORDER_STARTDATE = "startDate";
    public static final String ORDER_DUEDATE = "dueDate";
    public static final String ORDER_QUANTITY = "quantity";
    public static final String ORDER = "Order";
    public static final String SETUP = "Setup";
    public static final String FAILURE_STATUS = "status";
    public static final String FAILURE_TYPE = "type";
    public static final String FAILURE_OCCURRENCEDATE = "occurrenceDate";
    public static final String FAILURE = "Failure";
    public static final String MANUFACTUREJOURNAL_OPERATIONJOURNALS = "operationJournals";
    public static final String MANUFACTUREJOURNAL = "ManufactureJournal";
    public static final String PRODUCT_MATERIALS = "materials";
    public static final String PRODUCT_PLAN = "plan";
    public static final String PRODUCT = "Product";
    public static final String MATERIAL = "Material";
    public static final String OPERATION_DURATION = "duration";
    public static final String OPERATION_SETUP = "setup";
    public static final String OPERATION_MATERIALS = "materials";
    public static final String OPERATION_FUNCTION = "function";
    public static final String OPERATION = "Operation";
    public static final String TOOL = "Tool";
    public static final String OPERATIONJOURNAL_OPERATION = "operation";
    public static final String OPERATIONJOURNAL_FAILURES = "failures";
    public static final String OPERATIONJOURNAL = "OperationJournal";
    public static final String FUNCTION_TYPE = "type";
    public static final String FUNCTION = "Function";

    /**
     * Constructor
     */
    private ManufactureOntology() {
        super(ONTOLOGY_NAME, BasicOntology.getInstance());
        try {

            // adding Concept(s)
            ConceptSchema functionSchema = new ConceptSchema(FUNCTION);
            add(functionSchema, Function.class);
            ConceptSchema operationJournalSchema = new ConceptSchema(OPERATIONJOURNAL);
            add(operationJournalSchema, OperationJournal.class);
            ConceptSchema toolSchema = new ConceptSchema(TOOL);
            add(toolSchema, Tool.class);
            ConceptSchema operationSchema = new ConceptSchema(OPERATION);
            add(operationSchema, Operation.class);
            ConceptSchema materialSchema = new ConceptSchema(MATERIAL);
            add(materialSchema, Material.class);
            ConceptSchema productSchema = new ConceptSchema(PRODUCT);
            add(productSchema, Product.class);
            ConceptSchema manufactureJournalSchema = new ConceptSchema(MANUFACTUREJOURNAL);
            add(manufactureJournalSchema, ManufactureJournal.class);
            ConceptSchema failureSchema = new ConceptSchema(FAILURE);
            add(failureSchema, Failure.class);
            ConceptSchema setupSchema = new ConceptSchema(SETUP);
            add(setupSchema, Setup.class);
            ConceptSchema orderSchema = new ConceptSchema(ORDER);
            add(orderSchema, Order.class);
            ConceptSchema abstractJournalSchema = new ConceptSchema(ABSTRACTJOURNAL);
            add(abstractJournalSchema, AbstractJournal.class);
            ConceptSchema resourceSchema = new ConceptSchema(RESOURCE);
            add(resourceSchema, Resource.class);
            ConceptSchema abstractItemSchema = new ConceptSchema(ABSTRACTITEM);
            add(abstractItemSchema, AbstractItem.class);
            ConceptSchema planSchema = new ConceptSchema(PLAN);
            add(planSchema, Plan.class);

            // adding AgentAction(s)
            AgentActionSchema sendManufactureJournalSchema = new AgentActionSchema(SENDMANUFACTUREJOURNAL);
            add(sendManufactureJournalSchema, SendManufactureJournal.class);
            AgentActionSchema sendOperationJournalSchema = new AgentActionSchema(SENDOPERATIONJOURNAL);
            add(sendOperationJournalSchema, SendOperationJournal.class);
            AgentActionSchema sendTaskSchema = new AgentActionSchema(SENDTASK);
            add(sendTaskSchema, SendTask.class);
            AgentActionSchema sendOrder = new AgentActionSchema(SENDORDER);
            add(sendOrder, SendOrder.class);

            // adding AID(s)

            // adding Predicate(s)


            // adding fields
            functionSchema.add(FUNCTION_TYPE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            operationJournalSchema.add(OPERATIONJOURNAL_FAILURES, failureSchema, 0, ObjectSchema.UNLIMITED);
            operationJournalSchema.add(OPERATIONJOURNAL_OPERATION, operationSchema, ObjectSchema.OPTIONAL);
            operationSchema.add(OPERATION_FUNCTION, functionSchema, ObjectSchema.OPTIONAL);
            operationSchema.add(OPERATION_MATERIALS, materialSchema, 1, ObjectSchema.UNLIMITED);
            operationSchema.add(OPERATION_SETUP, setupSchema, ObjectSchema.OPTIONAL);
            operationSchema.add(OPERATION_DURATION, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            productSchema.add(PRODUCT_PLAN, planSchema, ObjectSchema.OPTIONAL);
            productSchema.add(PRODUCT_MATERIALS, materialSchema, 1, ObjectSchema.UNLIMITED);
            manufactureJournalSchema.add(MANUFACTUREJOURNAL_OPERATIONJOURNALS, operationJournalSchema, 0, ObjectSchema.UNLIMITED);
            failureSchema.add(FAILURE_OCCURRENCEDATE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            failureSchema.add(FAILURE_TYPE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            failureSchema.add(FAILURE_STATUS, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            orderSchema.add(ORDER_QUANTITY, (TermSchema) getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
            orderSchema.add(ORDER_DUEDATE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            orderSchema.add(ORDER_STARTDATE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            orderSchema.add(ORDER_PRODUCT, productSchema, ObjectSchema.OPTIONAL);
            abstractJournalSchema.add(ABSTRACTJOURNAL_ENDDATE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            abstractJournalSchema.add(ABSTRACTJOURNAL_STARTDATE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            abstractJournalSchema.add(ABSTRACTJOURNAL_STATUS, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            resourceSchema.add(RESOURCE_LOCATION, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            resourceSchema.add(RESOURCE_TYPE, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            resourceSchema.add(RESOURCE_TOOLS, toolSchema, 1, ObjectSchema.UNLIMITED);
            abstractItemSchema.add(ABSTRACTITEM_DESCRIPTION, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            abstractItemSchema.add(ABSTRACTITEM_NAME, (TermSchema) getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
            planSchema.add(PLAN_OPERATIONS, operationSchema, 1, ObjectSchema.UNLIMITED);
            sendManufactureJournalSchema.add(SENDMANUFACTUREJOURNAL_MANUFACTUREJOURNAL, manufactureJournalSchema, ObjectSchema.OPTIONAL);
            sendOperationJournalSchema.add(SENDOPERATIONJOURNAL_OPERATIONJOURNAL, operationJournalSchema, ObjectSchema.OPTIONAL);
            sendTaskSchema.add(SENDTASK_OPERATION, operationSchema, ObjectSchema.OPTIONAL);
            sendOrder.add(SENDORDER_ORDER, orderSchema, ObjectSchema.OPTIONAL);

            // adding name mappings

            // adding inheritance
            functionSchema.addSuperSchema(abstractItemSchema);
            operationJournalSchema.addSuperSchema(abstractJournalSchema);
            toolSchema.addSuperSchema(abstractItemSchema);
            operationSchema.addSuperSchema(abstractItemSchema);
            materialSchema.addSuperSchema(abstractItemSchema);
            productSchema.addSuperSchema(abstractItemSchema);
            manufactureJournalSchema.addSuperSchema(abstractJournalSchema);
            failureSchema.addSuperSchema(abstractItemSchema);
            setupSchema.addSuperSchema(abstractItemSchema);
            orderSchema.addSuperSchema(abstractItemSchema);
            resourceSchema.addSuperSchema(abstractItemSchema);
            planSchema.addSuperSchema(abstractItemSchema);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
